var searchIndex = JSON.parse('{\
"black76":{"doc":"This library provides an simple, lightweight, and …","t":[13,8,8,3,4,8,13,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Call","Greeks","ImpliedVolatility","Inputs","OptionType","Pricing","Put","borrow","borrow","borrow_mut","borrow_mut","calc_all_greeks","calc_all_greeks","calc_charm","calc_charm","calc_color","calc_color","calc_delta","calc_delta","calc_dual_delta","calc_dual_delta","calc_dual_gamma","calc_dual_gamma","calc_epsilon","calc_epsilon","calc_gamma","calc_gamma","calc_iv","calc_iv","calc_lambda","calc_lambda","calc_price","calc_price","calc_rho","calc_rho","calc_speed","calc_speed","calc_theta","calc_theta","calc_ultima","calc_ultima","calc_vanna","calc_vanna","calc_vega","calc_vega","calc_veta","calc_veta","calc_vomma","calc_vomma","calc_zomma","calc_zomma","clone","clone","clone_into","clone_into","eq","eq","f","fmt","fmt","fmt","fmt","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","k","new","option_type","p","q","r","sigma","t","to_owned","to_owned","to_string","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["black76","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The inputs to the Black-Scholes-Merton model.","The type of option to be priced (call or put).","","","","","","","","Calculates all Greeks of the option.","","","","Calculates the color of the option.","","Calculates the delta of the option.","","Calculates the dual delta of the option.","","Calculates the dual gamma of the option.","","Calculates the epsilon of the option.","","Calculates the gamma of the option.","","Calculates the implied volatility of the option. Tolerance …","","Calculates the lambda of the option.","","Calculates the price of the option.","","Calculates the rho of the option.","","Calculates the speed of the option.","","Calculates the theta of the option. Uses 365.25 days in a …","","Calculates the ultima of the option.","","Calculates the vanna of the option.","","Calculates the vega of the option.","","Calculates the veta of the option.","","Calculates the vomma of the option.","","Calculates the zomma of the option.","","","","","","","Futures price","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Strike price","Creates instance ot the <code>Inputs</code> struct.","The type of the option (call or put)","Option price","Dividend yield","Risk-free rate","Volatility","Time to maturity in years","","","","","","","","","","","","","","","",""],"i":[6,0,0,0,0,0,6,6,4,6,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,13,4,12,4,14,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,6,4,6,4,6,4,4,6,6,4,4,6,4,6,4,6,4,6,4,4,4,4,4,4,4,4,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[3,[[2,[1]],1]]]],[4,[[3,[[2,[1,5]],1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[[4,5],[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[[],[[3,[1]]]],[4,[[3,[5,1]]]],[6,6],[4,4],[[]],[[]],[[6,6],7],[[4,4],7],0,[[6,8],9],[[6,8],9],[[4,8],9],[[4,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],0,[[6,5,5,[10,[5]],5,5,5,[10,[5]]],4],0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[],10],[[],10],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],11],[[],11],[[]],[[]]],"p":[[3,"String"],[3,"HashMap"],[4,"Result"],[3,"Inputs"],[15,"f32"],[4,"OptionType"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"TypeId"],[8,"Greeks"],[8,"ImpliedVolatility"],[8,"Pricing"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
